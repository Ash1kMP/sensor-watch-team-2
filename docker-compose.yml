version: '3.8'
services:
  db-service:
    build:
      context: ./db-service
    ports:
      - "27017:27017" # Adjust according to your NoSQL database
    networks:
      - sensorwatch-network

  # queue-service:
  #   build:
  #     context: ./queue-service
  #   ports:
  #     - "5672:5672" 
  #     - "15672:15672" 
  #   networks:
  #     - sensorwatch-network

  queue-service:
    image: rabbitmq:3.13-management
    container_name: queue-service
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672"     # AMQP for apps
      - "15672:15672"   # Management UI
    networks:
      - sensorwatch-network


  # mock-esp32-service:
  #   build:
  #     context: ./mock-esp32-service
  #   ports:
  #     - "8080:8080"
  #   networks:
  #     - sensorwatch-network
  #   depends_on:
  #     - queue-service

  esp32-bridge:
    build:
      context: ./esp32-bridge
    environment:
      - MQTT_URL=${MQTT_URL:-mqtt://test.mosquitto.org:1883}
      - MQTT_TOPIC=${MQTT_TOPIC:-dev/+/telemetry}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://user:password@queue-service:5672}
      - FRONTEND_QUEUE=${FRONTEND_QUEUE:-sensor-data-frontend}
      - DB_QUEUE=${DB_QUEUE:-sensor-data-db}
    depends_on:
      - queue-service
    networks:
      - sensorwatch-network



  consumer-service-db:
    build:
      context: ./consumer-service-db
    depends_on:
      - queue-service
      - db-service
    networks:
      - sensorwatch-network

  # consumer-service-fe:
  #   build:
  #     context: ./consumer-service-fe
  #   depends_on:
  #     - queue-service
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - sensorwatch-network

  # new
  # consumer-service-fe:
  #   build: ./consumer-service-fe
  #   ports:
  #     - "3000:3000"   # expose to host
  #   depends_on:
  #     - queue-service
  
  consumer-service-fe:
    build: ./consumer-service-fe
    environment:
      - DOCKER=true
      - RABBITMQ_URL=amqp://user:password@queue-service:5672
      - FRONTEND_QUEUE=sensor-data-frontend
    ports:
      - "3000:3000"   # expose WS to your browser
    depends_on:
      queue-service:
        condition: service_healthy
    networks:
      - sensorwatch-network

  frontend-dashboard:
    build:
      context: ./frontend-dashboard
    ports:
      - "4200:4200"
    networks:
      - sensorwatch-network
  
  # nginx-gateway:
  #   build:
  #     context: ./nginx-gateway
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - backend-service
  #     - frontend-dashboard
  #     - queue-service
  #   networks:
  #     - sensorwatch-network
  
  # discovery-service:
  #   build:
  #     context: ./discovery-service
  #   ports:
  #     - "5000:5000"
  #   networks:
  #     - sensorwatch-network

networks:
  sensorwatch-network:
    driver: bridge